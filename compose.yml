version: '3.7'

services:
  pet-db:
    container_name: pet-db
    build:
      context: pet-db
      dockerfile: Dockerfile
    environment:
      MYSQL_ROOT_PASSWORD: ${PET_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${PET_MYSQL_DATABASE}
      MYSQL_USER: ${PET_MYSQL_USER}
      MYSQL_PASSWORD: ${PET_MYSQL_PASSWORD}
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "pet-db" ]
      retries: 1
    ports:
      - ${PET_MYSQL_PORT}:3306
    networks:
      - pet
    restart: always

  pet-app:
    container_name: pet-app
    image: piffek1/pet-service
    depends_on:
      pet-db:
        condition: service_healthy
    ports:
      - ${PET_APP_PORT}:${PET_APP_PORT}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s
    volumes:
      - ./wait-for-it.sh:/wait-for-it.sh
    command: ["./wait-for-it.sh", "rabbitmq:5672", "/docker-entrypoint.sh", "nginx", "-g", "daemon off;"]
    networks:
      - pet
      - rabbit
    restart: always

  shelter-db:
    container_name: shelter-db
    build:
      context: shelter-db
      dockerfile: Dockerfile
    environment:
      POSTGRES_PASSWORD: ${SHELTER_POSTGRES_PASSWORD}
      POSTGRES_USER: ${SHELTER_POSTGRES_USER}
      POSTGRES_DB: ${SHELTER_POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${SHELTER_POSTGRES_USER} -d ${SHELTER_POSTGRES_DB}'" ]
      interval: 3s
      timeout: 3s
      retries: 3
    ports:
      - ${SHELTER_POSTGRES_PORT}:5432
    networks:
      - shelter
    restart: always

  shelter-app:
    container_name: shelter-app
    image: piffek1/shelter-service
    depends_on:
      shelter-db:
        condition: service_healthy
    ports:
      - ${SHELTER_APP_PORT}:${SHELTER_APP_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ./wait-for-it.sh:/wait-for-it.sh
    command: ["./wait-for-it.sh", "rabbitmq:5672", "/docker-entrypoint.sh", "shelter-app", "-g", "daemon off;"]  # Use wait-for-it script
    networks:
      - shelter
      - rabbit
    restart: always

  metrics-db:
    container_name: metrics-db
    build:
      context: metrics-db
      dockerfile: Dockerfile
    environment:
      MYSQL_ROOT_PASSWORD: ${METRICS_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${METRICS_MYSQL_DATABASE}
      MYSQL_USER: ${METRICS_MYSQL_USER}
      MYSQL_PASSWORD: ${METRICS_MYSQL_PASSWORD}
    depends_on:
      shelter-db:
        condition: service_healthy
      pet-db:
        condition: service_healthy
    ports:
      - ${METRICS_MYSQL_PORT}:3306
    restart: always

  rabbitmq:
    build: rabbit/.
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - rabbit
    restart: always

  nginx:
    image: nginx
    ports:
      - ${NGINX_SERVER_PORT}:80
    depends_on:
      shelter-app:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - shelter
      - pet
    restart: always

networks:
  shelter:
    driver: bridge
  pet:
    driver: bridge
  rabbit:
    driver: bridge